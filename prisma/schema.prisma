// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String       @id
  telegramId        BigInt      @unique  // Changed from String to BigInt
  username          String?
  stars             Int          @default(0)
  totalSpentStars   Int          @default(0)
  totalBoughtStars  Int          @default(0)
  generations       Generation[]
  models            LoraModel[]
  trainings         Training[]   
  starTransactions  StarTransaction[]
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

model BaseModel {
  id            String       @id @default(cuid())
  name          String      
  version       String      
  type          BaseModelType
  isDefault     Boolean     @default(false)
  generations   Generation[]
  loras         LoraModel[]
  trainings     Training[]
}

model LoraModel {
  id              String       @id @default(cuid())
  name            String
  triggerWord     String      
  weightsUrl      String?     @unique  
  configUrl       String?     @unique  
  baseModelId     String      
  baseModel       BaseModel   @relation(fields: [baseModelId], references: [id])
  type            LoraType    @default(STYLE)
  status          LoraStatus  @default(PENDING)
  previewImageUrl String?     
  isPublic        Boolean     @default(false)
  starsRequired   Int         @default(2)
  userId          String      
  user            User        @relation(fields: [userId], references: [id])
  generations     Generation[]
  training        Training?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([userId])
  @@index([isPublic])
}

model Training {
  id              String       @id @default(cuid())
  loraId          String      @unique  
  lora            LoraModel   @relation(fields: [loraId], references: [id])
  baseModelId     String
  baseModel       BaseModel   @relation(fields: [baseModelId], references: [id])
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  imageUrls       String[]    
  instancePrompt  String      
  classPrompt     String?     
  steps           Int         @default(100)
  learningRate    Float       @default(0.0001)
  starsSpent      Int        
  status          TrainStatus @default(PENDING)
  error           String?     
  startedAt       DateTime    @default(now())
  completedAt     DateTime?   
  metadata        Json?       

  @@index([userId])
  @@index([status])
}

model Generation {
  id              String      @id @default(cuid())
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  baseModelId     String
  baseModel       BaseModel   @relation(fields: [baseModelId], references: [id])
  loraId          String?     // Optional - generation might not use a LoRA
  lora            LoraModel?  @relation(fields: [loraId], references: [id])
  prompt          String
  negativePrompt  String?    
  imageUrl        String
  seed            BigInt?    
  starsUsed       Int
  metadata        Json?      
  createdAt       DateTime    @default(now())

  @@index([userId])
  @@index([createdAt])
}

model StarTransaction {
  id                      String    @id @default(cuid())
  userId                  String
  user                    User      @relation(fields: [userId], references: [id])
  amount                  Int       
  type                    TransactionType
  telegramPaymentChargeId String?   @unique
  status                  TransactionStatus @default(COMPLETED)
  metadata                Json?     
  createdAt              DateTime   @default(now())

  @@index([userId])
  @@index([createdAt])
}

enum BaseModelType {
  FLUX
  FLUX_FAST
  FLUX_PORTRAIT
}

enum LoraType {
  STYLE    
  PORTRAIT 
}

enum LoraStatus {
  PENDING
  TRAINING
  COMPLETED
  FAILED
}

enum TrainStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum TransactionType {
  PURCHASE
  GENERATION
  TRAINING
  REFUND
  ADMIN_GRANT
  BONUS
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}